// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  address   String?
  currency  String   @default("USD")
  timezone  String   @default("America/New_York")
  serviceType String @default("TABLE") // TABLE, PICKUP
  taxRateBps Int     @default(0) // basis points
  defaultTipBps Int  @default(0) // basis points
  
  // Stripe Connect
  stripeAccountId    String?  @unique
  chargesEnabled     Boolean  @default(false)
  payoutsEnabled     Boolean  @default(false)
  
  // Stripe Billing
  billingCustomerId     String?
  billingSubscriptionId String?
  trialEndsAt           DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tables        Table[]
  menuCategories MenuCategory[]
  menuItems     MenuItem[]
  orders        Order[]
  staffUsers    StaffUser[]
  invitations   Invitation[]

  @@map("restaurants")
}

model StaffUser {
  id           String     @id @default(cuid())
  restaurantId String
  clerkUserId  String     @unique
  role         StaffRole  @default(STAFF) // OWNER, MANAGER, STAFF
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("staff_users")
}

model Table {
  id           String     @id @default(cuid())
  restaurantId String
  label        String
  code         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@unique([restaurantId, code])
  @@map("tables")
}

model MenuCategory {
  id           String     @id @default(cuid())
  restaurantId String
  name         String
  sortOrder    Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems  MenuItem[]

  @@map("menu_categories")
}

model MenuItem {
  id           String     @id @default(cuid())
  restaurantId String
  categoryId   String
  name         String
  priceCents   Int
  description  String?
  imageUrl     String?
  isAvailable  Boolean    @default(true)
  sortOrder    Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  restaurant  Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  category    MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  modifiers   Modifier[]
  orderItems  OrderItem[]

  @@map("menu_items")
}

model Modifier {
  id              String       @id @default(cuid())
  menuItemId      String
  name            String
  type            ModifierType @default(SINGLE) // SINGLE, MULTI
  priceDeltaCents Int          @default(0)
  isRequired      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  menuItem MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("modifiers")
}

model Order {
  id              String      @id @default(cuid())
  restaurantId    String
  tableId         String?
  code            String
  status          OrderStatus @default(NEW) // NEW, PAID, IN_PROGRESS, READY, DELIVERED, CANCELED
  subtotalCents   Int
  tipCents        Int         @default(0)
  taxCents        Int         @default(0)
  totalCents      Int
  stripeSessionId String?
  notes           String?
  customerName    String?
  customerEmail   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  restaurant Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  table      Table?       @relation(fields: [tableId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id              String     @id @default(cuid())
  orderId         String
  menuItemId      String
  qty             Int
  unitPriceCents  Int
  notes           String?
  modifiers       Json?      // JSON for modifiers
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Enums
enum ModifierType {
  SINGLE
  MULTI
}

enum OrderStatus {
  NEW
  PAID
  IN_PROGRESS
  READY
  DELIVERED
  CANCELED
}

enum StaffRole {
  SUPERADMIN
  OWNER
  MANAGER
  STAFF
}

model Invitation {
  id           String   @id @default(cuid())
  email        String
  role         StaffRole
  restaurantId String?
  token        String   @unique
  expiresAt    DateTime
  acceptedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  restaurant Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("invitations")
}